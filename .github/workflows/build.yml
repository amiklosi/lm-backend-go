name: Build and Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      app-image: ${{ steps.app-image-output.outputs.image }}
      mysql-image: ${{ steps.mysql-image-output.outputs.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main application image
        id: app-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set app image output
        id: app-image-output
        run: |
          # Use short commit SHA for cleaner tags
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          APP_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${SHORT_SHA}"
          echo "image=$APP_TAG" >> $GITHUB_OUTPUT
          echo "App image tag: $APP_TAG"

      - name: Build and push MySQL image
        id: mysql-image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.mysql
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set mysql image output
        id: mysql-image-output
        run: |
          # Use short commit SHA for cleaner tags
          MYSQL_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-mysql:${{ github.sha }}"
          echo "image=$MYSQL_TAG" >> $GITHUB_OUTPUT
          echo "MySQL image tag: $MYSQL_TAG"

      - name: Output image info
        if: github.event_name != 'pull_request'
        run: |
          echo "Main app image: ${{ steps.app-image-output.outputs.image }}"
          echo "MySQL image: ${{ steps.mysql-image-output.outputs.image }}"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Make deploy script executable
        run: chmod +x deploy.sh

      - name: Deploy to Portainer
        env:
          PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
          PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
          PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
          STACK_ID: ${{ secrets.STACK_ID }}
          ENDPOINT_ID: ${{ secrets.ENDPOINT_ID }}
          APP_IMAGE: ${{ needs.build.outputs.app-image }}
          MYSQL_IMAGE: ${{ needs.build.outputs.mysql-image }}
        run: |
          echo "Deploying with images:"
          echo "  App: ${{ needs.build.outputs.app-image }}"
          echo "  MySQL: ${{ needs.build.outputs.mysql-image }}"
          ./deploy.sh "$APP_IMAGE" "$MYSQL_IMAGE"
